// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.29.3
// source: osdd/recipes/context.proto

package recipes

import (
	osdd "github.com/opensdd/osdd-api/clients/go/osdd"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Context struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Entries *[]*ContextEntry       `protobuf:"bytes,1,rep,name=entries,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Context) Reset() {
	*x = Context{}
	mi := &file_osdd_recipes_context_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context) ProtoMessage() {}

func (x *Context) ProtoReflect() protoreflect.Message {
	mi := &file_osdd_recipes_context_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Context) GetEntries() []*ContextEntry {
	if x != nil {
		if x.xxx_hidden_Entries != nil {
			return *x.xxx_hidden_Entries
		}
	}
	return nil
}

func (x *Context) SetEntries(v []*ContextEntry) {
	x.xxx_hidden_Entries = &v
}

type Context_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Entries []*ContextEntry
}

func (b0 Context_builder) Build() *Context {
	m0 := &Context{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Entries = &b.Entries
	return m0
}

type ContextEntry struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Path string                 `protobuf:"bytes,1,opt,name=path,proto3"`
	xxx_hidden_From *ContextFrom           `protobuf:"bytes,2,opt,name=from,proto3"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ContextEntry) Reset() {
	*x = ContextEntry{}
	mi := &file_osdd_recipes_context_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextEntry) ProtoMessage() {}

func (x *ContextEntry) ProtoReflect() protoreflect.Message {
	mi := &file_osdd_recipes_context_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ContextEntry) GetPath() string {
	if x != nil {
		return x.xxx_hidden_Path
	}
	return ""
}

func (x *ContextEntry) GetFrom() *ContextFrom {
	if x != nil {
		return x.xxx_hidden_From
	}
	return nil
}

func (x *ContextEntry) SetPath(v string) {
	x.xxx_hidden_Path = v
}

func (x *ContextEntry) SetFrom(v *ContextFrom) {
	x.xxx_hidden_From = v
}

func (x *ContextEntry) HasFrom() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_From != nil
}

func (x *ContextEntry) ClearFrom() {
	x.xxx_hidden_From = nil
}

type ContextEntry_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Path string
	From *ContextFrom
}

func (b0 ContextEntry_builder) Build() *ContextEntry {
	m0 := &ContextEntry{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Path = b.Path
	x.xxx_hidden_From = b.From
	return m0
}

type ContextFrom struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Type isContextFrom_Type     `protobuf_oneof:"type"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ContextFrom) Reset() {
	*x = ContextFrom{}
	mi := &file_osdd_recipes_context_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextFrom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextFrom) ProtoMessage() {}

func (x *ContextFrom) ProtoReflect() protoreflect.Message {
	mi := &file_osdd_recipes_context_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ContextFrom) GetCombined() *CombinedContextSource {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*contextFrom_Combined); ok {
			return x.Combined
		}
	}
	return nil
}

func (x *ContextFrom) GetGithub() *osdd.GitReference {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*contextFrom_Github); ok {
			return x.Github
		}
	}
	return nil
}

func (x *ContextFrom) GetCmd() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*contextFrom_Cmd); ok {
			return x.Cmd
		}
	}
	return ""
}

func (x *ContextFrom) GetText() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*contextFrom_Text); ok {
			return x.Text
		}
	}
	return ""
}

func (x *ContextFrom) GetPrefetchId() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*contextFrom_PrefetchId); ok {
			return x.PrefetchId
		}
	}
	return ""
}

func (x *ContextFrom) GetUserInput() *UserInputContextSource {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*contextFrom_UserInput); ok {
			return x.UserInput
		}
	}
	return nil
}

func (x *ContextFrom) SetCombined(v *CombinedContextSource) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &contextFrom_Combined{v}
}

func (x *ContextFrom) SetGithub(v *osdd.GitReference) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &contextFrom_Github{v}
}

func (x *ContextFrom) SetCmd(v string) {
	x.xxx_hidden_Type = &contextFrom_Cmd{v}
}

func (x *ContextFrom) SetText(v string) {
	x.xxx_hidden_Type = &contextFrom_Text{v}
}

func (x *ContextFrom) SetPrefetchId(v string) {
	x.xxx_hidden_Type = &contextFrom_PrefetchId{v}
}

func (x *ContextFrom) SetUserInput(v *UserInputContextSource) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &contextFrom_UserInput{v}
}

func (x *ContextFrom) HasType() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Type != nil
}

func (x *ContextFrom) HasCombined() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*contextFrom_Combined)
	return ok
}

func (x *ContextFrom) HasGithub() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*contextFrom_Github)
	return ok
}

func (x *ContextFrom) HasCmd() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*contextFrom_Cmd)
	return ok
}

func (x *ContextFrom) HasText() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*contextFrom_Text)
	return ok
}

func (x *ContextFrom) HasPrefetchId() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*contextFrom_PrefetchId)
	return ok
}

func (x *ContextFrom) HasUserInput() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*contextFrom_UserInput)
	return ok
}

func (x *ContextFrom) ClearType() {
	x.xxx_hidden_Type = nil
}

func (x *ContextFrom) ClearCombined() {
	if _, ok := x.xxx_hidden_Type.(*contextFrom_Combined); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *ContextFrom) ClearGithub() {
	if _, ok := x.xxx_hidden_Type.(*contextFrom_Github); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *ContextFrom) ClearCmd() {
	if _, ok := x.xxx_hidden_Type.(*contextFrom_Cmd); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *ContextFrom) ClearText() {
	if _, ok := x.xxx_hidden_Type.(*contextFrom_Text); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *ContextFrom) ClearPrefetchId() {
	if _, ok := x.xxx_hidden_Type.(*contextFrom_PrefetchId); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *ContextFrom) ClearUserInput() {
	if _, ok := x.xxx_hidden_Type.(*contextFrom_UserInput); ok {
		x.xxx_hidden_Type = nil
	}
}

const ContextFrom_Type_not_set_case case_ContextFrom_Type = 0
const ContextFrom_Combined_case case_ContextFrom_Type = 100
const ContextFrom_Github_case case_ContextFrom_Type = 101
const ContextFrom_Cmd_case case_ContextFrom_Type = 102
const ContextFrom_Text_case case_ContextFrom_Type = 103
const ContextFrom_PrefetchId_case case_ContextFrom_Type = 104
const ContextFrom_UserInput_case case_ContextFrom_Type = 105

func (x *ContextFrom) WhichType() case_ContextFrom_Type {
	if x == nil {
		return ContextFrom_Type_not_set_case
	}
	switch x.xxx_hidden_Type.(type) {
	case *contextFrom_Combined:
		return ContextFrom_Combined_case
	case *contextFrom_Github:
		return ContextFrom_Github_case
	case *contextFrom_Cmd:
		return ContextFrom_Cmd_case
	case *contextFrom_Text:
		return ContextFrom_Text_case
	case *contextFrom_PrefetchId:
		return ContextFrom_PrefetchId_case
	case *contextFrom_UserInput:
		return ContextFrom_UserInput_case
	default:
		return ContextFrom_Type_not_set_case
	}
}

type ContextFrom_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Type:
	Combined   *CombinedContextSource
	Github     *osdd.GitReference
	Cmd        *string
	Text       *string
	PrefetchId *string
	UserInput  *UserInputContextSource
	// -- end of xxx_hidden_Type
}

func (b0 ContextFrom_builder) Build() *ContextFrom {
	m0 := &ContextFrom{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Combined != nil {
		x.xxx_hidden_Type = &contextFrom_Combined{b.Combined}
	}
	if b.Github != nil {
		x.xxx_hidden_Type = &contextFrom_Github{b.Github}
	}
	if b.Cmd != nil {
		x.xxx_hidden_Type = &contextFrom_Cmd{*b.Cmd}
	}
	if b.Text != nil {
		x.xxx_hidden_Type = &contextFrom_Text{*b.Text}
	}
	if b.PrefetchId != nil {
		x.xxx_hidden_Type = &contextFrom_PrefetchId{*b.PrefetchId}
	}
	if b.UserInput != nil {
		x.xxx_hidden_Type = &contextFrom_UserInput{b.UserInput}
	}
	return m0
}

type case_ContextFrom_Type protoreflect.FieldNumber

func (x case_ContextFrom_Type) String() string {
	md := file_osdd_recipes_context_proto_msgTypes[2].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isContextFrom_Type interface {
	isContextFrom_Type()
}

type contextFrom_Combined struct {
	Combined *CombinedContextSource `protobuf:"bytes,100,opt,name=combined,proto3,oneof"`
}

type contextFrom_Github struct {
	Github *osdd.GitReference `protobuf:"bytes,101,opt,name=github,proto3,oneof"`
}

type contextFrom_Cmd struct {
	Cmd string `protobuf:"bytes,102,opt,name=cmd,proto3,oneof"`
}

type contextFrom_Text struct {
	Text string `protobuf:"bytes,103,opt,name=text,proto3,oneof"`
}

type contextFrom_PrefetchId struct {
	PrefetchId string `protobuf:"bytes,104,opt,name=prefetch_id,json=prefetchId,proto3,oneof"`
}

type contextFrom_UserInput struct {
	UserInput *UserInputContextSource `protobuf:"bytes,105,opt,name=user_input,json=userInput,proto3,oneof"`
}

func (*contextFrom_Combined) isContextFrom_Type() {}

func (*contextFrom_Github) isContextFrom_Type() {}

func (*contextFrom_Cmd) isContextFrom_Type() {}

func (*contextFrom_Text) isContextFrom_Type() {}

func (*contextFrom_PrefetchId) isContextFrom_Type() {}

func (*contextFrom_UserInput) isContextFrom_Type() {}

type CombinedContextSource struct {
	state            protoimpl.MessageState         `protogen:"opaque.v1"`
	xxx_hidden_Items *[]*CombinedContextSource_Item `protobuf:"bytes,1,rep,name=items,proto3"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CombinedContextSource) Reset() {
	*x = CombinedContextSource{}
	mi := &file_osdd_recipes_context_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CombinedContextSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CombinedContextSource) ProtoMessage() {}

func (x *CombinedContextSource) ProtoReflect() protoreflect.Message {
	mi := &file_osdd_recipes_context_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CombinedContextSource) GetItems() []*CombinedContextSource_Item {
	if x != nil {
		if x.xxx_hidden_Items != nil {
			return *x.xxx_hidden_Items
		}
	}
	return nil
}

func (x *CombinedContextSource) SetItems(v []*CombinedContextSource_Item) {
	x.xxx_hidden_Items = &v
}

type CombinedContextSource_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Items []*CombinedContextSource_Item
}

func (b0 CombinedContextSource_builder) Build() *CombinedContextSource {
	m0 := &CombinedContextSource{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Items = &b.Items
	return m0
}

type UserInputContextSource struct {
	state              protoimpl.MessageState      `protogen:"opaque.v1"`
	xxx_hidden_Entries *[]*osdd.UserInputParameter `protobuf:"bytes,1,rep,name=entries,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UserInputContextSource) Reset() {
	*x = UserInputContextSource{}
	mi := &file_osdd_recipes_context_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInputContextSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInputContextSource) ProtoMessage() {}

func (x *UserInputContextSource) ProtoReflect() protoreflect.Message {
	mi := &file_osdd_recipes_context_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UserInputContextSource) GetEntries() []*osdd.UserInputParameter {
	if x != nil {
		if x.xxx_hidden_Entries != nil {
			return *x.xxx_hidden_Entries
		}
	}
	return nil
}

func (x *UserInputContextSource) SetEntries(v []*osdd.UserInputParameter) {
	x.xxx_hidden_Entries = &v
}

type UserInputContextSource_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Entries []*osdd.UserInputParameter
}

func (b0 UserInputContextSource_builder) Build() *UserInputContextSource {
	m0 := &UserInputContextSource{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Entries = &b.Entries
	return m0
}

type CombinedContextSource_Item struct {
	state           protoimpl.MessageState            `protogen:"opaque.v1"`
	xxx_hidden_Type isCombinedContextSource_Item_Type `protobuf_oneof:"type"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CombinedContextSource_Item) Reset() {
	*x = CombinedContextSource_Item{}
	mi := &file_osdd_recipes_context_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CombinedContextSource_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CombinedContextSource_Item) ProtoMessage() {}

func (x *CombinedContextSource_Item) ProtoReflect() protoreflect.Message {
	mi := &file_osdd_recipes_context_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CombinedContextSource_Item) GetGithub() *osdd.GitReference {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*combinedContextSource_Item_Github); ok {
			return x.Github
		}
	}
	return nil
}

func (x *CombinedContextSource_Item) GetCmd() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*combinedContextSource_Item_Cmd); ok {
			return x.Cmd
		}
	}
	return ""
}

func (x *CombinedContextSource_Item) GetText() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*combinedContextSource_Item_Text); ok {
			return x.Text
		}
	}
	return ""
}

func (x *CombinedContextSource_Item) GetPrefetchId() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*combinedContextSource_Item_PrefetchId); ok {
			return x.PrefetchId
		}
	}
	return ""
}

func (x *CombinedContextSource_Item) GetUserInput() *UserInputContextSource {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*combinedContextSource_Item_UserInput); ok {
			return x.UserInput
		}
	}
	return nil
}

func (x *CombinedContextSource_Item) SetGithub(v *osdd.GitReference) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &combinedContextSource_Item_Github{v}
}

func (x *CombinedContextSource_Item) SetCmd(v string) {
	x.xxx_hidden_Type = &combinedContextSource_Item_Cmd{v}
}

func (x *CombinedContextSource_Item) SetText(v string) {
	x.xxx_hidden_Type = &combinedContextSource_Item_Text{v}
}

func (x *CombinedContextSource_Item) SetPrefetchId(v string) {
	x.xxx_hidden_Type = &combinedContextSource_Item_PrefetchId{v}
}

func (x *CombinedContextSource_Item) SetUserInput(v *UserInputContextSource) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &combinedContextSource_Item_UserInput{v}
}

func (x *CombinedContextSource_Item) HasType() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Type != nil
}

func (x *CombinedContextSource_Item) HasGithub() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*combinedContextSource_Item_Github)
	return ok
}

func (x *CombinedContextSource_Item) HasCmd() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*combinedContextSource_Item_Cmd)
	return ok
}

func (x *CombinedContextSource_Item) HasText() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*combinedContextSource_Item_Text)
	return ok
}

func (x *CombinedContextSource_Item) HasPrefetchId() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*combinedContextSource_Item_PrefetchId)
	return ok
}

func (x *CombinedContextSource_Item) HasUserInput() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*combinedContextSource_Item_UserInput)
	return ok
}

func (x *CombinedContextSource_Item) ClearType() {
	x.xxx_hidden_Type = nil
}

func (x *CombinedContextSource_Item) ClearGithub() {
	if _, ok := x.xxx_hidden_Type.(*combinedContextSource_Item_Github); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *CombinedContextSource_Item) ClearCmd() {
	if _, ok := x.xxx_hidden_Type.(*combinedContextSource_Item_Cmd); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *CombinedContextSource_Item) ClearText() {
	if _, ok := x.xxx_hidden_Type.(*combinedContextSource_Item_Text); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *CombinedContextSource_Item) ClearPrefetchId() {
	if _, ok := x.xxx_hidden_Type.(*combinedContextSource_Item_PrefetchId); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *CombinedContextSource_Item) ClearUserInput() {
	if _, ok := x.xxx_hidden_Type.(*combinedContextSource_Item_UserInput); ok {
		x.xxx_hidden_Type = nil
	}
}

const CombinedContextSource_Item_Type_not_set_case case_CombinedContextSource_Item_Type = 0
const CombinedContextSource_Item_Github_case case_CombinedContextSource_Item_Type = 100
const CombinedContextSource_Item_Cmd_case case_CombinedContextSource_Item_Type = 101
const CombinedContextSource_Item_Text_case case_CombinedContextSource_Item_Type = 102
const CombinedContextSource_Item_PrefetchId_case case_CombinedContextSource_Item_Type = 103
const CombinedContextSource_Item_UserInput_case case_CombinedContextSource_Item_Type = 104

func (x *CombinedContextSource_Item) WhichType() case_CombinedContextSource_Item_Type {
	if x == nil {
		return CombinedContextSource_Item_Type_not_set_case
	}
	switch x.xxx_hidden_Type.(type) {
	case *combinedContextSource_Item_Github:
		return CombinedContextSource_Item_Github_case
	case *combinedContextSource_Item_Cmd:
		return CombinedContextSource_Item_Cmd_case
	case *combinedContextSource_Item_Text:
		return CombinedContextSource_Item_Text_case
	case *combinedContextSource_Item_PrefetchId:
		return CombinedContextSource_Item_PrefetchId_case
	case *combinedContextSource_Item_UserInput:
		return CombinedContextSource_Item_UserInput_case
	default:
		return CombinedContextSource_Item_Type_not_set_case
	}
}

type CombinedContextSource_Item_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Type:
	Github     *osdd.GitReference
	Cmd        *string
	Text       *string
	PrefetchId *string
	UserInput  *UserInputContextSource
	// -- end of xxx_hidden_Type
}

func (b0 CombinedContextSource_Item_builder) Build() *CombinedContextSource_Item {
	m0 := &CombinedContextSource_Item{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Github != nil {
		x.xxx_hidden_Type = &combinedContextSource_Item_Github{b.Github}
	}
	if b.Cmd != nil {
		x.xxx_hidden_Type = &combinedContextSource_Item_Cmd{*b.Cmd}
	}
	if b.Text != nil {
		x.xxx_hidden_Type = &combinedContextSource_Item_Text{*b.Text}
	}
	if b.PrefetchId != nil {
		x.xxx_hidden_Type = &combinedContextSource_Item_PrefetchId{*b.PrefetchId}
	}
	if b.UserInput != nil {
		x.xxx_hidden_Type = &combinedContextSource_Item_UserInput{b.UserInput}
	}
	return m0
}

type case_CombinedContextSource_Item_Type protoreflect.FieldNumber

func (x case_CombinedContextSource_Item_Type) String() string {
	md := file_osdd_recipes_context_proto_msgTypes[5].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isCombinedContextSource_Item_Type interface {
	isCombinedContextSource_Item_Type()
}

type combinedContextSource_Item_Github struct {
	Github *osdd.GitReference `protobuf:"bytes,100,opt,name=github,proto3,oneof"`
}

type combinedContextSource_Item_Cmd struct {
	Cmd string `protobuf:"bytes,101,opt,name=cmd,proto3,oneof"`
}

type combinedContextSource_Item_Text struct {
	Text string `protobuf:"bytes,102,opt,name=text,proto3,oneof"`
}

type combinedContextSource_Item_PrefetchId struct {
	PrefetchId string `protobuf:"bytes,103,opt,name=prefetch_id,json=prefetchId,proto3,oneof"`
}

type combinedContextSource_Item_UserInput struct {
	UserInput *UserInputContextSource `protobuf:"bytes,104,opt,name=user_input,json=userInput,proto3,oneof"`
}

func (*combinedContextSource_Item_Github) isCombinedContextSource_Item_Type() {}

func (*combinedContextSource_Item_Cmd) isCombinedContextSource_Item_Type() {}

func (*combinedContextSource_Item_Text) isCombinedContextSource_Item_Type() {}

func (*combinedContextSource_Item_PrefetchId) isCombinedContextSource_Item_Type() {}

func (*combinedContextSource_Item_UserInput) isCombinedContextSource_Item_Type() {}

var File_osdd_recipes_context_proto protoreflect.FileDescriptor

const file_osdd_recipes_context_proto_rawDesc = "" +
	"\n" +
	"\x1aosdd/recipes/context.proto\x12\x14osdd.recipes.context\x1a\x11osdd/common.proto\"G\n" +
	"\aContext\x12<\n" +
	"\aentries\x18\x01 \x03(\v2\".osdd.recipes.context.ContextEntryR\aentries\"Y\n" +
	"\fContextEntry\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x125\n" +
	"\x04from\x18\x02 \x01(\v2!.osdd.recipes.context.ContextFromR\x04from\"\xb1\x02\n" +
	"\vContextFrom\x12I\n" +
	"\bcombined\x18d \x01(\v2+.osdd.recipes.context.CombinedContextSourceH\x00R\bcombined\x123\n" +
	"\x06github\x18e \x01(\v2\x19.osdd.common.GitReferenceH\x00R\x06github\x12\x12\n" +
	"\x03cmd\x18f \x01(\tH\x00R\x03cmd\x12\x14\n" +
	"\x04text\x18g \x01(\tH\x00R\x04text\x12!\n" +
	"\vprefetch_id\x18h \x01(\tH\x00R\n" +
	"prefetchId\x12M\n" +
	"\n" +
	"user_input\x18i \x01(\v2,.osdd.recipes.context.UserInputContextSourceH\x00R\tuserInputB\x06\n" +
	"\x04type\"\xc1\x02\n" +
	"\x15CombinedContextSource\x12F\n" +
	"\x05items\x18\x01 \x03(\v20.osdd.recipes.context.CombinedContextSource.ItemR\x05items\x1a\xdf\x01\n" +
	"\x04Item\x123\n" +
	"\x06github\x18d \x01(\v2\x19.osdd.common.GitReferenceH\x00R\x06github\x12\x12\n" +
	"\x03cmd\x18e \x01(\tH\x00R\x03cmd\x12\x14\n" +
	"\x04text\x18f \x01(\tH\x00R\x04text\x12!\n" +
	"\vprefetch_id\x18g \x01(\tH\x00R\n" +
	"prefetchId\x12M\n" +
	"\n" +
	"user_input\x18h \x01(\v2,.osdd.recipes.context.UserInputContextSourceH\x00R\tuserInputB\x06\n" +
	"\x04type\"S\n" +
	"\x16UserInputContextSource\x129\n" +
	"\aentries\x18\x01 \x03(\v2\x1f.osdd.common.UserInputParameterR\aentriesB5Z3github.com/opensdd/osdd-api/clients/go/osdd/recipesb\x06proto3"

var file_osdd_recipes_context_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_osdd_recipes_context_proto_goTypes = []any{
	(*Context)(nil),                    // 0: osdd.recipes.context.Context
	(*ContextEntry)(nil),               // 1: osdd.recipes.context.ContextEntry
	(*ContextFrom)(nil),                // 2: osdd.recipes.context.ContextFrom
	(*CombinedContextSource)(nil),      // 3: osdd.recipes.context.CombinedContextSource
	(*UserInputContextSource)(nil),     // 4: osdd.recipes.context.UserInputContextSource
	(*CombinedContextSource_Item)(nil), // 5: osdd.recipes.context.CombinedContextSource.Item
	(*osdd.GitReference)(nil),          // 6: osdd.common.GitReference
	(*osdd.UserInputParameter)(nil),    // 7: osdd.common.UserInputParameter
}
var file_osdd_recipes_context_proto_depIdxs = []int32{
	1, // 0: osdd.recipes.context.Context.entries:type_name -> osdd.recipes.context.ContextEntry
	2, // 1: osdd.recipes.context.ContextEntry.from:type_name -> osdd.recipes.context.ContextFrom
	3, // 2: osdd.recipes.context.ContextFrom.combined:type_name -> osdd.recipes.context.CombinedContextSource
	6, // 3: osdd.recipes.context.ContextFrom.github:type_name -> osdd.common.GitReference
	4, // 4: osdd.recipes.context.ContextFrom.user_input:type_name -> osdd.recipes.context.UserInputContextSource
	5, // 5: osdd.recipes.context.CombinedContextSource.items:type_name -> osdd.recipes.context.CombinedContextSource.Item
	7, // 6: osdd.recipes.context.UserInputContextSource.entries:type_name -> osdd.common.UserInputParameter
	6, // 7: osdd.recipes.context.CombinedContextSource.Item.github:type_name -> osdd.common.GitReference
	4, // 8: osdd.recipes.context.CombinedContextSource.Item.user_input:type_name -> osdd.recipes.context.UserInputContextSource
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_osdd_recipes_context_proto_init() }
func file_osdd_recipes_context_proto_init() {
	if File_osdd_recipes_context_proto != nil {
		return
	}
	file_osdd_recipes_context_proto_msgTypes[2].OneofWrappers = []any{
		(*contextFrom_Combined)(nil),
		(*contextFrom_Github)(nil),
		(*contextFrom_Cmd)(nil),
		(*contextFrom_Text)(nil),
		(*contextFrom_PrefetchId)(nil),
		(*contextFrom_UserInput)(nil),
	}
	file_osdd_recipes_context_proto_msgTypes[5].OneofWrappers = []any{
		(*combinedContextSource_Item_Github)(nil),
		(*combinedContextSource_Item_Cmd)(nil),
		(*combinedContextSource_Item_Text)(nil),
		(*combinedContextSource_Item_PrefetchId)(nil),
		(*combinedContextSource_Item_UserInput)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_osdd_recipes_context_proto_rawDesc), len(file_osdd_recipes_context_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_osdd_recipes_context_proto_goTypes,
		DependencyIndexes: file_osdd_recipes_context_proto_depIdxs,
		MessageInfos:      file_osdd_recipes_context_proto_msgTypes,
	}.Build()
	File_osdd_recipes_context_proto = out.File
	file_osdd_recipes_context_proto_goTypes = nil
	file_osdd_recipes_context_proto_depIdxs = nil
}
