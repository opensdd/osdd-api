// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.29.3
// source: osdd/recipes/ide.proto

package recipes

import (
	osdd "github.com/opensdd/osdd-api/clients/go/osdd"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Ide struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Commands    *Commands              `protobuf:"bytes,1,opt,name=commands,proto3,oneof"`
	xxx_hidden_Mcp         *Mcp                   `protobuf:"bytes,2,opt,name=mcp,proto3,oneof"`
	xxx_hidden_Permissions *Permissions           `protobuf:"bytes,3,opt,name=permissions,proto3,oneof"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Ide) Reset() {
	*x = Ide{}
	mi := &file_osdd_recipes_ide_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ide) ProtoMessage() {}

func (x *Ide) ProtoReflect() protoreflect.Message {
	mi := &file_osdd_recipes_ide_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Ide) GetCommands() *Commands {
	if x != nil {
		return x.xxx_hidden_Commands
	}
	return nil
}

func (x *Ide) GetMcp() *Mcp {
	if x != nil {
		return x.xxx_hidden_Mcp
	}
	return nil
}

func (x *Ide) GetPermissions() *Permissions {
	if x != nil {
		return x.xxx_hidden_Permissions
	}
	return nil
}

func (x *Ide) SetCommands(v *Commands) {
	x.xxx_hidden_Commands = v
}

func (x *Ide) SetMcp(v *Mcp) {
	x.xxx_hidden_Mcp = v
}

func (x *Ide) SetPermissions(v *Permissions) {
	x.xxx_hidden_Permissions = v
}

func (x *Ide) HasCommands() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Commands != nil
}

func (x *Ide) HasMcp() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Mcp != nil
}

func (x *Ide) HasPermissions() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Permissions != nil
}

func (x *Ide) ClearCommands() {
	x.xxx_hidden_Commands = nil
}

func (x *Ide) ClearMcp() {
	x.xxx_hidden_Mcp = nil
}

func (x *Ide) ClearPermissions() {
	x.xxx_hidden_Permissions = nil
}

type Ide_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Commands    *Commands
	Mcp         *Mcp
	Permissions *Permissions
}

func (b0 Ide_builder) Build() *Ide {
	m0 := &Ide{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Commands = b.Commands
	x.xxx_hidden_Mcp = b.Mcp
	x.xxx_hidden_Permissions = b.Permissions
	return m0
}

type Mcp struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Servers map[string]*McpServer  `protobuf:"bytes,1,rep,name=servers,proto3" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Mcp) Reset() {
	*x = Mcp{}
	mi := &file_osdd_recipes_ide_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mcp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mcp) ProtoMessage() {}

func (x *Mcp) ProtoReflect() protoreflect.Message {
	mi := &file_osdd_recipes_ide_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Mcp) GetServers() map[string]*McpServer {
	if x != nil {
		return x.xxx_hidden_Servers
	}
	return nil
}

func (x *Mcp) SetServers(v map[string]*McpServer) {
	x.xxx_hidden_Servers = v
}

type Mcp_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Servers map[string]*McpServer
}

func (b0 Mcp_builder) Build() *Mcp {
	m0 := &Mcp{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Servers = b.Servers
	return m0
}

type McpServer struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Type isMcpServer_Type       `protobuf_oneof:"type"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *McpServer) Reset() {
	*x = McpServer{}
	mi := &file_osdd_recipes_ide_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpServer) ProtoMessage() {}

func (x *McpServer) ProtoReflect() protoreflect.Message {
	mi := &file_osdd_recipes_ide_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *McpServer) GetHttp() *HttpMcpServer {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*mcpServer_Http); ok {
			return x.Http
		}
	}
	return nil
}

func (x *McpServer) GetStdio() *StdioMcpServer {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*mcpServer_Stdio); ok {
			return x.Stdio
		}
	}
	return nil
}

func (x *McpServer) SetHttp(v *HttpMcpServer) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &mcpServer_Http{v}
}

func (x *McpServer) SetStdio(v *StdioMcpServer) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &mcpServer_Stdio{v}
}

func (x *McpServer) HasType() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Type != nil
}

func (x *McpServer) HasHttp() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*mcpServer_Http)
	return ok
}

func (x *McpServer) HasStdio() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*mcpServer_Stdio)
	return ok
}

func (x *McpServer) ClearType() {
	x.xxx_hidden_Type = nil
}

func (x *McpServer) ClearHttp() {
	if _, ok := x.xxx_hidden_Type.(*mcpServer_Http); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *McpServer) ClearStdio() {
	if _, ok := x.xxx_hidden_Type.(*mcpServer_Stdio); ok {
		x.xxx_hidden_Type = nil
	}
}

const McpServer_Type_not_set_case case_McpServer_Type = 0
const McpServer_Http_case case_McpServer_Type = 100
const McpServer_Stdio_case case_McpServer_Type = 101

func (x *McpServer) WhichType() case_McpServer_Type {
	if x == nil {
		return McpServer_Type_not_set_case
	}
	switch x.xxx_hidden_Type.(type) {
	case *mcpServer_Http:
		return McpServer_Http_case
	case *mcpServer_Stdio:
		return McpServer_Stdio_case
	default:
		return McpServer_Type_not_set_case
	}
}

type McpServer_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Type:
	Http  *HttpMcpServer
	Stdio *StdioMcpServer
	// -- end of xxx_hidden_Type
}

func (b0 McpServer_builder) Build() *McpServer {
	m0 := &McpServer{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Http != nil {
		x.xxx_hidden_Type = &mcpServer_Http{b.Http}
	}
	if b.Stdio != nil {
		x.xxx_hidden_Type = &mcpServer_Stdio{b.Stdio}
	}
	return m0
}

type case_McpServer_Type protoreflect.FieldNumber

func (x case_McpServer_Type) String() string {
	md := file_osdd_recipes_ide_proto_msgTypes[2].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isMcpServer_Type interface {
	isMcpServer_Type()
}

type mcpServer_Http struct {
	Http *HttpMcpServer `protobuf:"bytes,100,opt,name=http,proto3,oneof"`
}

type mcpServer_Stdio struct {
	Stdio *StdioMcpServer `protobuf:"bytes,101,opt,name=stdio,proto3,oneof"`
}

func (*mcpServer_Http) isMcpServer_Type() {}

func (*mcpServer_Stdio) isMcpServer_Type() {}

type HttpMcpServer struct {
	state          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Url string                 `protobuf:"bytes,1,opt,name=url,proto3"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HttpMcpServer) Reset() {
	*x = HttpMcpServer{}
	mi := &file_osdd_recipes_ide_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpMcpServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpMcpServer) ProtoMessage() {}

func (x *HttpMcpServer) ProtoReflect() protoreflect.Message {
	mi := &file_osdd_recipes_ide_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HttpMcpServer) GetUrl() string {
	if x != nil {
		return x.xxx_hidden_Url
	}
	return ""
}

func (x *HttpMcpServer) SetUrl(v string) {
	x.xxx_hidden_Url = v
}

type HttpMcpServer_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Url string
}

func (b0 HttpMcpServer_builder) Build() *HttpMcpServer {
	m0 := &HttpMcpServer{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Url = b.Url
	return m0
}

type StdioMcpServer struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Command string                 `protobuf:"bytes,1,opt,name=command,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *StdioMcpServer) Reset() {
	*x = StdioMcpServer{}
	mi := &file_osdd_recipes_ide_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StdioMcpServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StdioMcpServer) ProtoMessage() {}

func (x *StdioMcpServer) ProtoReflect() protoreflect.Message {
	mi := &file_osdd_recipes_ide_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StdioMcpServer) GetCommand() string {
	if x != nil {
		return x.xxx_hidden_Command
	}
	return ""
}

func (x *StdioMcpServer) SetCommand(v string) {
	x.xxx_hidden_Command = v
}

type StdioMcpServer_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Command string
}

func (b0 StdioMcpServer_builder) Build() *StdioMcpServer {
	m0 := &StdioMcpServer{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Command = b.Command
	return m0
}

type Commands struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Entries *[]*Command            `protobuf:"bytes,1,rep,name=entries,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Commands) Reset() {
	*x = Commands{}
	mi := &file_osdd_recipes_ide_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Commands) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commands) ProtoMessage() {}

func (x *Commands) ProtoReflect() protoreflect.Message {
	mi := &file_osdd_recipes_ide_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Commands) GetEntries() []*Command {
	if x != nil {
		if x.xxx_hidden_Entries != nil {
			return *x.xxx_hidden_Entries
		}
	}
	return nil
}

func (x *Commands) SetEntries(v []*Command) {
	x.xxx_hidden_Entries = &v
}

type Commands_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Entries []*Command
}

func (b0 Commands_builder) Build() *Commands {
	m0 := &Commands{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Entries = &b.Entries
	return m0
}

type Command struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Name string                 `protobuf:"bytes,1,opt,name=name,proto3"`
	xxx_hidden_From *CommandFrom           `protobuf:"bytes,2,opt,name=from,proto3"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Command) Reset() {
	*x = Command{}
	mi := &file_osdd_recipes_ide_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_osdd_recipes_ide_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Command) GetName() string {
	if x != nil {
		return x.xxx_hidden_Name
	}
	return ""
}

func (x *Command) GetFrom() *CommandFrom {
	if x != nil {
		return x.xxx_hidden_From
	}
	return nil
}

func (x *Command) SetName(v string) {
	x.xxx_hidden_Name = v
}

func (x *Command) SetFrom(v *CommandFrom) {
	x.xxx_hidden_From = v
}

func (x *Command) HasFrom() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_From != nil
}

func (x *Command) ClearFrom() {
	x.xxx_hidden_From = nil
}

type Command_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Name string
	From *CommandFrom
}

func (b0 Command_builder) Build() *Command {
	m0 := &Command{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Name = b.Name
	x.xxx_hidden_From = b.From
	return m0
}

type CommandFrom struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Type isCommandFrom_Type     `protobuf_oneof:"type"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CommandFrom) Reset() {
	*x = CommandFrom{}
	mi := &file_osdd_recipes_ide_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandFrom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandFrom) ProtoMessage() {}

func (x *CommandFrom) ProtoReflect() protoreflect.Message {
	mi := &file_osdd_recipes_ide_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CommandFrom) GetGithub() *osdd.GitReference {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*commandFrom_Github); ok {
			return x.Github
		}
	}
	return nil
}

func (x *CommandFrom) GetCmd() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*commandFrom_Cmd); ok {
			return x.Cmd
		}
	}
	return ""
}

func (x *CommandFrom) GetText() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*commandFrom_Text); ok {
			return x.Text
		}
	}
	return ""
}

func (x *CommandFrom) SetGithub(v *osdd.GitReference) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &commandFrom_Github{v}
}

func (x *CommandFrom) SetCmd(v string) {
	x.xxx_hidden_Type = &commandFrom_Cmd{v}
}

func (x *CommandFrom) SetText(v string) {
	x.xxx_hidden_Type = &commandFrom_Text{v}
}

func (x *CommandFrom) HasType() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Type != nil
}

func (x *CommandFrom) HasGithub() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*commandFrom_Github)
	return ok
}

func (x *CommandFrom) HasCmd() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*commandFrom_Cmd)
	return ok
}

func (x *CommandFrom) HasText() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*commandFrom_Text)
	return ok
}

func (x *CommandFrom) ClearType() {
	x.xxx_hidden_Type = nil
}

func (x *CommandFrom) ClearGithub() {
	if _, ok := x.xxx_hidden_Type.(*commandFrom_Github); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *CommandFrom) ClearCmd() {
	if _, ok := x.xxx_hidden_Type.(*commandFrom_Cmd); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *CommandFrom) ClearText() {
	if _, ok := x.xxx_hidden_Type.(*commandFrom_Text); ok {
		x.xxx_hidden_Type = nil
	}
}

const CommandFrom_Type_not_set_case case_CommandFrom_Type = 0
const CommandFrom_Github_case case_CommandFrom_Type = 100
const CommandFrom_Cmd_case case_CommandFrom_Type = 101
const CommandFrom_Text_case case_CommandFrom_Type = 102

func (x *CommandFrom) WhichType() case_CommandFrom_Type {
	if x == nil {
		return CommandFrom_Type_not_set_case
	}
	switch x.xxx_hidden_Type.(type) {
	case *commandFrom_Github:
		return CommandFrom_Github_case
	case *commandFrom_Cmd:
		return CommandFrom_Cmd_case
	case *commandFrom_Text:
		return CommandFrom_Text_case
	default:
		return CommandFrom_Type_not_set_case
	}
}

type CommandFrom_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Type:
	Github *osdd.GitReference
	Cmd    *string
	Text   *string
	// -- end of xxx_hidden_Type
}

func (b0 CommandFrom_builder) Build() *CommandFrom {
	m0 := &CommandFrom{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Github != nil {
		x.xxx_hidden_Type = &commandFrom_Github{b.Github}
	}
	if b.Cmd != nil {
		x.xxx_hidden_Type = &commandFrom_Cmd{*b.Cmd}
	}
	if b.Text != nil {
		x.xxx_hidden_Type = &commandFrom_Text{*b.Text}
	}
	return m0
}

type case_CommandFrom_Type protoreflect.FieldNumber

func (x case_CommandFrom_Type) String() string {
	md := file_osdd_recipes_ide_proto_msgTypes[7].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isCommandFrom_Type interface {
	isCommandFrom_Type()
}

type commandFrom_Github struct {
	Github *osdd.GitReference `protobuf:"bytes,100,opt,name=github,proto3,oneof"`
}

type commandFrom_Cmd struct {
	Cmd string `protobuf:"bytes,101,opt,name=cmd,proto3,oneof"`
}

type commandFrom_Text struct {
	Text string `protobuf:"bytes,102,opt,name=text,proto3,oneof"`
}

func (*commandFrom_Github) isCommandFrom_Type() {}

func (*commandFrom_Cmd) isCommandFrom_Type() {}

func (*commandFrom_Text) isCommandFrom_Type() {}

var File_osdd_recipes_ide_proto protoreflect.FileDescriptor

const file_osdd_recipes_ide_proto_rawDesc = "" +
	"\n" +
	"\x16osdd/recipes/ide.proto\x12\x10osdd.recipes.ide\x1a\x11osdd/common.proto\x1a\x1eosdd/recipes/permissions.proto\"\xe3\x01\n" +
	"\x03Ide\x12;\n" +
	"\bcommands\x18\x01 \x01(\v2\x1a.osdd.recipes.ide.CommandsH\x00R\bcommands\x88\x01\x01\x12,\n" +
	"\x03mcp\x18\x02 \x01(\v2\x15.osdd.recipes.ide.McpH\x01R\x03mcp\x88\x01\x01\x12L\n" +
	"\vpermissions\x18\x03 \x01(\v2%.osdd.recipes.permissions.PermissionsH\x02R\vpermissions\x88\x01\x01B\v\n" +
	"\t_commandsB\x06\n" +
	"\x04_mcpB\x0e\n" +
	"\f_permissions\"\x9c\x01\n" +
	"\x03Mcp\x12<\n" +
	"\aservers\x18\x01 \x03(\v2\".osdd.recipes.ide.Mcp.ServersEntryR\aservers\x1aW\n" +
	"\fServersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.osdd.recipes.ide.McpServerR\x05value:\x028\x01\"\x84\x01\n" +
	"\tMcpServer\x125\n" +
	"\x04http\x18d \x01(\v2\x1f.osdd.recipes.ide.HttpMcpServerH\x00R\x04http\x128\n" +
	"\x05stdio\x18e \x01(\v2 .osdd.recipes.ide.StdioMcpServerH\x00R\x05stdioB\x06\n" +
	"\x04type\"!\n" +
	"\rHttpMcpServer\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\"*\n" +
	"\x0eStdioMcpServer\x12\x18\n" +
	"\acommand\x18\x01 \x01(\tR\acommand\"?\n" +
	"\bCommands\x123\n" +
	"\aentries\x18\x01 \x03(\v2\x19.osdd.recipes.ide.CommandR\aentries\"P\n" +
	"\aCommand\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x121\n" +
	"\x04from\x18\x02 \x01(\v2\x1d.osdd.recipes.ide.CommandFromR\x04from\"t\n" +
	"\vCommandFrom\x123\n" +
	"\x06github\x18d \x01(\v2\x19.osdd.common.GitReferenceH\x00R\x06github\x12\x12\n" +
	"\x03cmd\x18e \x01(\tH\x00R\x03cmd\x12\x14\n" +
	"\x04text\x18f \x01(\tH\x00R\x04textB\x06\n" +
	"\x04typeB5Z3github.com/opensdd/osdd-api/clients/go/osdd/recipesb\x06proto3"

var file_osdd_recipes_ide_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_osdd_recipes_ide_proto_goTypes = []any{
	(*Ide)(nil),               // 0: osdd.recipes.ide.Ide
	(*Mcp)(nil),               // 1: osdd.recipes.ide.Mcp
	(*McpServer)(nil),         // 2: osdd.recipes.ide.McpServer
	(*HttpMcpServer)(nil),     // 3: osdd.recipes.ide.HttpMcpServer
	(*StdioMcpServer)(nil),    // 4: osdd.recipes.ide.StdioMcpServer
	(*Commands)(nil),          // 5: osdd.recipes.ide.Commands
	(*Command)(nil),           // 6: osdd.recipes.ide.Command
	(*CommandFrom)(nil),       // 7: osdd.recipes.ide.CommandFrom
	nil,                       // 8: osdd.recipes.ide.Mcp.ServersEntry
	(*Permissions)(nil),       // 9: osdd.recipes.permissions.Permissions
	(*osdd.GitReference)(nil), // 10: osdd.common.GitReference
}
var file_osdd_recipes_ide_proto_depIdxs = []int32{
	5,  // 0: osdd.recipes.ide.Ide.commands:type_name -> osdd.recipes.ide.Commands
	1,  // 1: osdd.recipes.ide.Ide.mcp:type_name -> osdd.recipes.ide.Mcp
	9,  // 2: osdd.recipes.ide.Ide.permissions:type_name -> osdd.recipes.permissions.Permissions
	8,  // 3: osdd.recipes.ide.Mcp.servers:type_name -> osdd.recipes.ide.Mcp.ServersEntry
	3,  // 4: osdd.recipes.ide.McpServer.http:type_name -> osdd.recipes.ide.HttpMcpServer
	4,  // 5: osdd.recipes.ide.McpServer.stdio:type_name -> osdd.recipes.ide.StdioMcpServer
	6,  // 6: osdd.recipes.ide.Commands.entries:type_name -> osdd.recipes.ide.Command
	7,  // 7: osdd.recipes.ide.Command.from:type_name -> osdd.recipes.ide.CommandFrom
	10, // 8: osdd.recipes.ide.CommandFrom.github:type_name -> osdd.common.GitReference
	2,  // 9: osdd.recipes.ide.Mcp.ServersEntry.value:type_name -> osdd.recipes.ide.McpServer
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_osdd_recipes_ide_proto_init() }
func file_osdd_recipes_ide_proto_init() {
	if File_osdd_recipes_ide_proto != nil {
		return
	}
	file_osdd_recipes_permissions_proto_init()
	file_osdd_recipes_ide_proto_msgTypes[0].OneofWrappers = []any{}
	file_osdd_recipes_ide_proto_msgTypes[2].OneofWrappers = []any{
		(*mcpServer_Http)(nil),
		(*mcpServer_Stdio)(nil),
	}
	file_osdd_recipes_ide_proto_msgTypes[7].OneofWrappers = []any{
		(*commandFrom_Github)(nil),
		(*commandFrom_Cmd)(nil),
		(*commandFrom_Text)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_osdd_recipes_ide_proto_rawDesc), len(file_osdd_recipes_ide_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_osdd_recipes_ide_proto_goTypes,
		DependencyIndexes: file_osdd_recipes_ide_proto_depIdxs,
		MessageInfos:      file_osdd_recipes_ide_proto_msgTypes,
	}.Build()
	File_osdd_recipes_ide_proto = out.File
	file_osdd_recipes_ide_proto_goTypes = nil
	file_osdd_recipes_ide_proto_depIdxs = nil
}
