// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.29.3
// source: osdd/common.proto

package osdd

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GitReference struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Path    string                 `protobuf:"bytes,1,opt,name=path,proto3"`
	xxx_hidden_Version *GitVersion            `protobuf:"bytes,2,opt,name=version,proto3,oneof"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GitReference) Reset() {
	*x = GitReference{}
	mi := &file_osdd_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitReference) ProtoMessage() {}

func (x *GitReference) ProtoReflect() protoreflect.Message {
	mi := &file_osdd_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GitReference) GetPath() string {
	if x != nil {
		return x.xxx_hidden_Path
	}
	return ""
}

func (x *GitReference) GetVersion() *GitVersion {
	if x != nil {
		return x.xxx_hidden_Version
	}
	return nil
}

func (x *GitReference) SetPath(v string) {
	x.xxx_hidden_Path = v
}

func (x *GitReference) SetVersion(v *GitVersion) {
	x.xxx_hidden_Version = v
}

func (x *GitReference) HasVersion() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Version != nil
}

func (x *GitReference) ClearVersion() {
	x.xxx_hidden_Version = nil
}

type GitReference_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Path    string
	Version *GitVersion
}

func (b0 GitReference_builder) Build() *GitReference {
	m0 := &GitReference{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Path = b.Path
	x.xxx_hidden_Version = b.Version
	return m0
}

type GitVersion struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Type isGitVersion_Type      `protobuf_oneof:"type"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GitVersion) Reset() {
	*x = GitVersion{}
	mi := &file_osdd_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitVersion) ProtoMessage() {}

func (x *GitVersion) ProtoReflect() protoreflect.Message {
	mi := &file_osdd_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GitVersion) GetTag() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*gitVersion_Tag); ok {
			return x.Tag
		}
	}
	return ""
}

func (x *GitVersion) GetCommit() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*gitVersion_Commit); ok {
			return x.Commit
		}
	}
	return ""
}

func (x *GitVersion) SetTag(v string) {
	x.xxx_hidden_Type = &gitVersion_Tag{v}
}

func (x *GitVersion) SetCommit(v string) {
	x.xxx_hidden_Type = &gitVersion_Commit{v}
}

func (x *GitVersion) HasType() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Type != nil
}

func (x *GitVersion) HasTag() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*gitVersion_Tag)
	return ok
}

func (x *GitVersion) HasCommit() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*gitVersion_Commit)
	return ok
}

func (x *GitVersion) ClearType() {
	x.xxx_hidden_Type = nil
}

func (x *GitVersion) ClearTag() {
	if _, ok := x.xxx_hidden_Type.(*gitVersion_Tag); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *GitVersion) ClearCommit() {
	if _, ok := x.xxx_hidden_Type.(*gitVersion_Commit); ok {
		x.xxx_hidden_Type = nil
	}
}

const GitVersion_Type_not_set_case case_GitVersion_Type = 0
const GitVersion_Tag_case case_GitVersion_Type = 100
const GitVersion_Commit_case case_GitVersion_Type = 101

func (x *GitVersion) WhichType() case_GitVersion_Type {
	if x == nil {
		return GitVersion_Type_not_set_case
	}
	switch x.xxx_hidden_Type.(type) {
	case *gitVersion_Tag:
		return GitVersion_Tag_case
	case *gitVersion_Commit:
		return GitVersion_Commit_case
	default:
		return GitVersion_Type_not_set_case
	}
}

type GitVersion_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Type:
	Tag    *string
	Commit *string
	// -- end of xxx_hidden_Type
}

func (b0 GitVersion_builder) Build() *GitVersion {
	m0 := &GitVersion{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Tag != nil {
		x.xxx_hidden_Type = &gitVersion_Tag{*b.Tag}
	}
	if b.Commit != nil {
		x.xxx_hidden_Type = &gitVersion_Commit{*b.Commit}
	}
	return m0
}

type case_GitVersion_Type protoreflect.FieldNumber

func (x case_GitVersion_Type) String() string {
	md := file_osdd_common_proto_msgTypes[1].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isGitVersion_Type interface {
	isGitVersion_Type()
}

type gitVersion_Tag struct {
	Tag string `protobuf:"bytes,100,opt,name=tag,proto3,oneof"`
}

type gitVersion_Commit struct {
	Commit string `protobuf:"bytes,101,opt,name=commit,proto3,oneof"`
}

func (*gitVersion_Tag) isGitVersion_Type() {}

func (*gitVersion_Commit) isGitVersion_Type() {}

type UserInputParameter struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Name        string                 `protobuf:"bytes,1,opt,name=name,proto3"`
	xxx_hidden_Description string                 `protobuf:"bytes,2,opt,name=description,proto3"`
	xxx_hidden_Optional    bool                   `protobuf:"varint,3,opt,name=optional,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UserInputParameter) Reset() {
	*x = UserInputParameter{}
	mi := &file_osdd_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInputParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInputParameter) ProtoMessage() {}

func (x *UserInputParameter) ProtoReflect() protoreflect.Message {
	mi := &file_osdd_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UserInputParameter) GetName() string {
	if x != nil {
		return x.xxx_hidden_Name
	}
	return ""
}

func (x *UserInputParameter) GetDescription() string {
	if x != nil {
		return x.xxx_hidden_Description
	}
	return ""
}

func (x *UserInputParameter) GetOptional() bool {
	if x != nil {
		return x.xxx_hidden_Optional
	}
	return false
}

func (x *UserInputParameter) SetName(v string) {
	x.xxx_hidden_Name = v
}

func (x *UserInputParameter) SetDescription(v string) {
	x.xxx_hidden_Description = v
}

func (x *UserInputParameter) SetOptional(v bool) {
	x.xxx_hidden_Optional = v
}

type UserInputParameter_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Name        string
	Description string
	Optional    bool
}

func (b0 UserInputParameter_builder) Build() *UserInputParameter {
	m0 := &UserInputParameter{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Name = b.Name
	x.xxx_hidden_Description = b.Description
	x.xxx_hidden_Optional = b.Optional
	return m0
}

type NameGenConfig struct {
	state          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Len int32                  `protobuf:"varint,1,opt,name=len,proto3"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NameGenConfig) Reset() {
	*x = NameGenConfig{}
	mi := &file_osdd_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NameGenConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameGenConfig) ProtoMessage() {}

func (x *NameGenConfig) ProtoReflect() protoreflect.Message {
	mi := &file_osdd_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *NameGenConfig) GetLen() int32 {
	if x != nil {
		return x.xxx_hidden_Len
	}
	return 0
}

func (x *NameGenConfig) SetLen(v int32) {
	x.xxx_hidden_Len = v
}

type NameGenConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Len int32
}

func (b0 NameGenConfig_builder) Build() *NameGenConfig {
	m0 := &NameGenConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Len = b.Len
	return m0
}

type Exec struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Cmd  string                 `protobuf:"bytes,1,opt,name=cmd,proto3"`
	xxx_hidden_Args []string               `protobuf:"bytes,2,rep,name=args,proto3"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Exec) Reset() {
	*x = Exec{}
	mi := &file_osdd_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Exec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exec) ProtoMessage() {}

func (x *Exec) ProtoReflect() protoreflect.Message {
	mi := &file_osdd_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Exec) GetCmd() string {
	if x != nil {
		return x.xxx_hidden_Cmd
	}
	return ""
}

func (x *Exec) GetArgs() []string {
	if x != nil {
		return x.xxx_hidden_Args
	}
	return nil
}

func (x *Exec) SetCmd(v string) {
	x.xxx_hidden_Cmd = v
}

func (x *Exec) SetArgs(v []string) {
	x.xxx_hidden_Args = v
}

type Exec_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Cmd  string
	Args []string
}

func (b0 Exec_builder) Build() *Exec {
	m0 := &Exec{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Cmd = b.Cmd
	x.xxx_hidden_Args = b.Args
	return m0
}

var File_osdd_common_proto protoreflect.FileDescriptor

const file_osdd_common_proto_rawDesc = "" +
	"\n" +
	"\x11osdd/common.proto\x12\vosdd.common\"f\n" +
	"\fGitReference\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x126\n" +
	"\aversion\x18\x02 \x01(\v2\x17.osdd.common.GitVersionH\x00R\aversion\x88\x01\x01B\n" +
	"\n" +
	"\b_version\"B\n" +
	"\n" +
	"GitVersion\x12\x12\n" +
	"\x03tag\x18d \x01(\tH\x00R\x03tag\x12\x18\n" +
	"\x06commit\x18e \x01(\tH\x00R\x06commitB\x06\n" +
	"\x04type\"f\n" +
	"\x12UserInputParameter\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x1a\n" +
	"\boptional\x18\x03 \x01(\bR\boptional\"!\n" +
	"\rNameGenConfig\x12\x10\n" +
	"\x03len\x18\x01 \x01(\x05R\x03len\",\n" +
	"\x04Exec\x12\x10\n" +
	"\x03cmd\x18\x01 \x01(\tR\x03cmd\x12\x12\n" +
	"\x04args\x18\x02 \x03(\tR\x04argsB-Z+github.com/opensdd/osdd-api/clients/go/osddb\x06proto3"

var file_osdd_common_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_osdd_common_proto_goTypes = []any{
	(*GitReference)(nil),       // 0: osdd.common.GitReference
	(*GitVersion)(nil),         // 1: osdd.common.GitVersion
	(*UserInputParameter)(nil), // 2: osdd.common.UserInputParameter
	(*NameGenConfig)(nil),      // 3: osdd.common.NameGenConfig
	(*Exec)(nil),               // 4: osdd.common.Exec
}
var file_osdd_common_proto_depIdxs = []int32{
	1, // 0: osdd.common.GitReference.version:type_name -> osdd.common.GitVersion
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_osdd_common_proto_init() }
func file_osdd_common_proto_init() {
	if File_osdd_common_proto != nil {
		return
	}
	file_osdd_common_proto_msgTypes[0].OneofWrappers = []any{}
	file_osdd_common_proto_msgTypes[1].OneofWrappers = []any{
		(*gitVersion_Tag)(nil),
		(*gitVersion_Commit)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_osdd_common_proto_rawDesc), len(file_osdd_common_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_osdd_common_proto_goTypes,
		DependencyIndexes: file_osdd_common_proto_depIdxs,
		MessageInfos:      file_osdd_common_proto_msgTypes,
	}.Build()
	File_osdd_common_proto = out.File
	file_osdd_common_proto_goTypes = nil
	file_osdd_common_proto_depIdxs = nil
}
