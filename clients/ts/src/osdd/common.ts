// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               v5.29.3
// source: osdd/common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "osdd.common";

export interface GitReference {
  path: string;
  version?: GitVersion | undefined;
}

export interface GitVersion {
  type?: { $case: "tag"; value: string } | { $case: "commit"; value: string } | undefined;
}

export interface UserInputParameter {
  name: string;
  description: string;
  optional: boolean;
}

export interface NameGenConfig {
  len: number;
}

function createBaseGitReference(): GitReference {
  return { path: "", version: undefined };
}

export const GitReference: MessageFns<GitReference> = {
  encode(message: GitReference, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.version !== undefined) {
      GitVersion.encode(message.version, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GitReference {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGitReference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.version = GitVersion.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GitReference {
    return {
      path: isSet(object.path) ? gt.String(object.path) : "",
      version: isSet(object.version) ? GitVersion.fromJSON(object.version) : undefined,
    };
  },

  toJSON(message: GitReference): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.version !== undefined) {
      obj.version = GitVersion.toJSON(message.version);
    }
    return obj;
  },

  create(base?: DeepPartial<GitReference>): GitReference {
    return GitReference.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GitReference>): GitReference {
    const message = createBaseGitReference();
    message.path = object.path ?? "";
    message.version = (object.version !== undefined && object.version !== null)
      ? GitVersion.fromPartial(object.version)
      : undefined;
    return message;
  },
};

function createBaseGitVersion(): GitVersion {
  return { type: undefined };
}

export const GitVersion: MessageFns<GitVersion> = {
  encode(message: GitVersion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.type?.$case) {
      case "tag":
        writer.uint32(802).string(message.type.value);
        break;
      case "commit":
        writer.uint32(810).string(message.type.value);
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GitVersion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGitVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 100: {
          if (tag !== 802) {
            break;
          }

          message.type = { $case: "tag", value: reader.string() };
          continue;
        }
        case 101: {
          if (tag !== 810) {
            break;
          }

          message.type = { $case: "commit", value: reader.string() };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GitVersion {
    return {
      type: isSet(object.tag)
        ? { $case: "tag", value: gt.String(object.tag) }
        : isSet(object.commit)
        ? { $case: "commit", value: gt.String(object.commit) }
        : undefined,
    };
  },

  toJSON(message: GitVersion): unknown {
    const obj: any = {};
    if (message.type?.$case === "tag") {
      obj.tag = message.type.value;
    } else if (message.type?.$case === "commit") {
      obj.commit = message.type.value;
    }
    return obj;
  },

  create(base?: DeepPartial<GitVersion>): GitVersion {
    return GitVersion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GitVersion>): GitVersion {
    const message = createBaseGitVersion();
    switch (object.type?.$case) {
      case "tag": {
        if (object.type?.value !== undefined && object.type?.value !== null) {
          message.type = { $case: "tag", value: object.type.value };
        }
        break;
      }
      case "commit": {
        if (object.type?.value !== undefined && object.type?.value !== null) {
          message.type = { $case: "commit", value: object.type.value };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseUserInputParameter(): UserInputParameter {
  return { name: "", description: "", optional: false };
}

export const UserInputParameter: MessageFns<UserInputParameter> = {
  encode(message: UserInputParameter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.optional !== false) {
      writer.uint32(24).bool(message.optional);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserInputParameter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserInputParameter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.optional = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserInputParameter {
    return {
      name: isSet(object.name) ? gt.String(object.name) : "",
      description: isSet(object.description) ? gt.String(object.description) : "",
      optional: isSet(object.optional) ? gt.Boolean(object.optional) : false,
    };
  },

  toJSON(message: UserInputParameter): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.optional !== false) {
      obj.optional = message.optional;
    }
    return obj;
  },

  create(base?: DeepPartial<UserInputParameter>): UserInputParameter {
    return UserInputParameter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserInputParameter>): UserInputParameter {
    const message = createBaseUserInputParameter();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.optional = object.optional ?? false;
    return message;
  },
};

function createBaseNameGenConfig(): NameGenConfig {
  return { len: 0 };
}

export const NameGenConfig: MessageFns<NameGenConfig> = {
  encode(message: NameGenConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.len !== 0) {
      writer.uint32(8).int32(message.len);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NameGenConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNameGenConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.len = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NameGenConfig {
    return { len: isSet(object.len) ? gt.Number(object.len) : 0 };
  },

  toJSON(message: NameGenConfig): unknown {
    const obj: any = {};
    if (message.len !== 0) {
      obj.len = Math.round(message.len);
    }
    return obj;
  },

  create(base?: DeepPartial<NameGenConfig>): NameGenConfig {
    return NameGenConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NameGenConfig>): NameGenConfig {
    const message = createBaseNameGenConfig();
    message.len = object.len ?? 0;
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
