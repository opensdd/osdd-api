// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               v5.29.3
// source: osdd/recipes/permissions.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "osdd.recipes.permissions";

export interface OperationPermission {
  type?:
    | { $case: "bash"; value: string }
    | { $case: "read"; value: string }
    | { $case: "write"; value: string }
    | undefined;
}

export interface Permissions {
  allow: OperationPermission[];
  deny: OperationPermission[];
}

function createBaseOperationPermission(): OperationPermission {
  return { type: undefined };
}

export const OperationPermission: MessageFns<OperationPermission> = {
  encode(message: OperationPermission, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.type?.$case) {
      case "bash":
        writer.uint32(802).string(message.type.value);
        break;
      case "read":
        writer.uint32(810).string(message.type.value);
        break;
      case "write":
        writer.uint32(818).string(message.type.value);
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationPermission {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationPermission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 100: {
          if (tag !== 802) {
            break;
          }

          message.type = { $case: "bash", value: reader.string() };
          continue;
        }
        case 101: {
          if (tag !== 810) {
            break;
          }

          message.type = { $case: "read", value: reader.string() };
          continue;
        }
        case 102: {
          if (tag !== 818) {
            break;
          }

          message.type = { $case: "write", value: reader.string() };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationPermission {
    return {
      type: isSet(object.bash)
        ? { $case: "bash", value: gt.String(object.bash) }
        : isSet(object.read)
        ? { $case: "read", value: gt.String(object.read) }
        : isSet(object.write)
        ? { $case: "write", value: gt.String(object.write) }
        : undefined,
    };
  },

  toJSON(message: OperationPermission): unknown {
    const obj: any = {};
    if (message.type?.$case === "bash") {
      obj.bash = message.type.value;
    } else if (message.type?.$case === "read") {
      obj.read = message.type.value;
    } else if (message.type?.$case === "write") {
      obj.write = message.type.value;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationPermission>): OperationPermission {
    return OperationPermission.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationPermission>): OperationPermission {
    const message = createBaseOperationPermission();
    switch (object.type?.$case) {
      case "bash": {
        if (object.type?.value !== undefined && object.type?.value !== null) {
          message.type = { $case: "bash", value: object.type.value };
        }
        break;
      }
      case "read": {
        if (object.type?.value !== undefined && object.type?.value !== null) {
          message.type = { $case: "read", value: object.type.value };
        }
        break;
      }
      case "write": {
        if (object.type?.value !== undefined && object.type?.value !== null) {
          message.type = { $case: "write", value: object.type.value };
        }
        break;
      }
    }
    return message;
  },
};

function createBasePermissions(): Permissions {
  return { allow: [], deny: [] };
}

export const Permissions: MessageFns<Permissions> = {
  encode(message: Permissions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.allow) {
      OperationPermission.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.deny) {
      OperationPermission.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Permissions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.allow.push(OperationPermission.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.deny.push(OperationPermission.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Permissions {
    return {
      allow: gt.Array.isArray(object?.allow) ? object.allow.map((e: any) => OperationPermission.fromJSON(e)) : [],
      deny: gt.Array.isArray(object?.deny) ? object.deny.map((e: any) => OperationPermission.fromJSON(e)) : [],
    };
  },

  toJSON(message: Permissions): unknown {
    const obj: any = {};
    if (message.allow?.length) {
      obj.allow = message.allow.map((e) => OperationPermission.toJSON(e));
    }
    if (message.deny?.length) {
      obj.deny = message.deny.map((e) => OperationPermission.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Permissions>): Permissions {
    return Permissions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Permissions>): Permissions {
    const message = createBasePermissions();
    message.allow = object.allow?.map((e) => OperationPermission.fromPartial(e)) || [];
    message.deny = object.deny?.map((e) => OperationPermission.fromPartial(e)) || [];
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
