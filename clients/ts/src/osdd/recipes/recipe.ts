// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               v5.29.3
// source: osdd/recipes/recipe.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { NameGenConfig } from "../common";
import { Prefetch } from "../content";
import { Context } from "./context";
import { Ide } from "./ide";

export const protobufPackage = "osdd.recipes.recipe";

export interface Recipe {
  prefetch?: Prefetch | undefined;
  context?: Context | undefined;
  ide?: Ide | undefined;
}

export interface ExecutableRecipe {
  recipe: Recipe | undefined;
  entryPoint: EntryPoint | undefined;
}

export interface EntryPoint {
  ideType: string;
  start?: StartConfig | undefined;
  workspace?: WorkspaceConfig | undefined;
}

export interface StartConfig {
  type?: { $case: "command"; value: string } | { $case: "prompt"; value: string } | undefined;
}

/** Describes workspace from which the recipe should be executed. */
export interface WorkspaceConfig {
  /** If true, then the recipe requires a workspace, as opposed to running in the current directory. */
  enabled: boolean;
  /** Path to the workspace relative to the home directory root. */
  path: string;
  /** Configuration for unique name generation. */
  unique?: NameGenConfig | undefined;
}

function createBaseRecipe(): Recipe {
  return { prefetch: undefined, context: undefined, ide: undefined };
}

export const Recipe: MessageFns<Recipe> = {
  encode(message: Recipe, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.prefetch !== undefined) {
      Prefetch.encode(message.prefetch, writer.uint32(10).fork()).join();
    }
    if (message.context !== undefined) {
      Context.encode(message.context, writer.uint32(18).fork()).join();
    }
    if (message.ide !== undefined) {
      Ide.encode(message.ide, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Recipe {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecipe();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.prefetch = Prefetch.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.context = Context.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ide = Ide.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Recipe {
    return {
      prefetch: isSet(object.prefetch) ? Prefetch.fromJSON(object.prefetch) : undefined,
      context: isSet(object.context) ? Context.fromJSON(object.context) : undefined,
      ide: isSet(object.ide) ? Ide.fromJSON(object.ide) : undefined,
    };
  },

  toJSON(message: Recipe): unknown {
    const obj: any = {};
    if (message.prefetch !== undefined) {
      obj.prefetch = Prefetch.toJSON(message.prefetch);
    }
    if (message.context !== undefined) {
      obj.context = Context.toJSON(message.context);
    }
    if (message.ide !== undefined) {
      obj.ide = Ide.toJSON(message.ide);
    }
    return obj;
  },

  create(base?: DeepPartial<Recipe>): Recipe {
    return Recipe.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Recipe>): Recipe {
    const message = createBaseRecipe();
    message.prefetch = (object.prefetch !== undefined && object.prefetch !== null)
      ? Prefetch.fromPartial(object.prefetch)
      : undefined;
    message.context = (object.context !== undefined && object.context !== null)
      ? Context.fromPartial(object.context)
      : undefined;
    message.ide = (object.ide !== undefined && object.ide !== null) ? Ide.fromPartial(object.ide) : undefined;
    return message;
  },
};

function createBaseExecutableRecipe(): ExecutableRecipe {
  return { recipe: undefined, entryPoint: undefined };
}

export const ExecutableRecipe: MessageFns<ExecutableRecipe> = {
  encode(message: ExecutableRecipe, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.recipe !== undefined) {
      Recipe.encode(message.recipe, writer.uint32(10).fork()).join();
    }
    if (message.entryPoint !== undefined) {
      EntryPoint.encode(message.entryPoint, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecutableRecipe {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecutableRecipe();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.recipe = Recipe.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.entryPoint = EntryPoint.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecutableRecipe {
    return {
      recipe: isSet(object.recipe) ? Recipe.fromJSON(object.recipe) : undefined,
      entryPoint: isSet(object.entryPoint) ? EntryPoint.fromJSON(object.entryPoint) : undefined,
    };
  },

  toJSON(message: ExecutableRecipe): unknown {
    const obj: any = {};
    if (message.recipe !== undefined) {
      obj.recipe = Recipe.toJSON(message.recipe);
    }
    if (message.entryPoint !== undefined) {
      obj.entryPoint = EntryPoint.toJSON(message.entryPoint);
    }
    return obj;
  },

  create(base?: DeepPartial<ExecutableRecipe>): ExecutableRecipe {
    return ExecutableRecipe.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExecutableRecipe>): ExecutableRecipe {
    const message = createBaseExecutableRecipe();
    message.recipe = (object.recipe !== undefined && object.recipe !== null)
      ? Recipe.fromPartial(object.recipe)
      : undefined;
    message.entryPoint = (object.entryPoint !== undefined && object.entryPoint !== null)
      ? EntryPoint.fromPartial(object.entryPoint)
      : undefined;
    return message;
  },
};

function createBaseEntryPoint(): EntryPoint {
  return { ideType: "", start: undefined, workspace: undefined };
}

export const EntryPoint: MessageFns<EntryPoint> = {
  encode(message: EntryPoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ideType !== "") {
      writer.uint32(10).string(message.ideType);
    }
    if (message.start !== undefined) {
      StartConfig.encode(message.start, writer.uint32(18).fork()).join();
    }
    if (message.workspace !== undefined) {
      WorkspaceConfig.encode(message.workspace, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntryPoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntryPoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ideType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.start = StartConfig.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.workspace = WorkspaceConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntryPoint {
    return {
      ideType: isSet(object.ideType) ? gt.String(object.ideType) : "",
      start: isSet(object.start) ? StartConfig.fromJSON(object.start) : undefined,
      workspace: isSet(object.workspace) ? WorkspaceConfig.fromJSON(object.workspace) : undefined,
    };
  },

  toJSON(message: EntryPoint): unknown {
    const obj: any = {};
    if (message.ideType !== "") {
      obj.ideType = message.ideType;
    }
    if (message.start !== undefined) {
      obj.start = StartConfig.toJSON(message.start);
    }
    if (message.workspace !== undefined) {
      obj.workspace = WorkspaceConfig.toJSON(message.workspace);
    }
    return obj;
  },

  create(base?: DeepPartial<EntryPoint>): EntryPoint {
    return EntryPoint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EntryPoint>): EntryPoint {
    const message = createBaseEntryPoint();
    message.ideType = object.ideType ?? "";
    message.start = (object.start !== undefined && object.start !== null)
      ? StartConfig.fromPartial(object.start)
      : undefined;
    message.workspace = (object.workspace !== undefined && object.workspace !== null)
      ? WorkspaceConfig.fromPartial(object.workspace)
      : undefined;
    return message;
  },
};

function createBaseStartConfig(): StartConfig {
  return { type: undefined };
}

export const StartConfig: MessageFns<StartConfig> = {
  encode(message: StartConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.type?.$case) {
      case "command":
        writer.uint32(802).string(message.type.value);
        break;
      case "prompt":
        writer.uint32(810).string(message.type.value);
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 100: {
          if (tag !== 802) {
            break;
          }

          message.type = { $case: "command", value: reader.string() };
          continue;
        }
        case 101: {
          if (tag !== 810) {
            break;
          }

          message.type = { $case: "prompt", value: reader.string() };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartConfig {
    return {
      type: isSet(object.command)
        ? { $case: "command", value: gt.String(object.command) }
        : isSet(object.prompt)
        ? { $case: "prompt", value: gt.String(object.prompt) }
        : undefined,
    };
  },

  toJSON(message: StartConfig): unknown {
    const obj: any = {};
    if (message.type?.$case === "command") {
      obj.command = message.type.value;
    } else if (message.type?.$case === "prompt") {
      obj.prompt = message.type.value;
    }
    return obj;
  },

  create(base?: DeepPartial<StartConfig>): StartConfig {
    return StartConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StartConfig>): StartConfig {
    const message = createBaseStartConfig();
    switch (object.type?.$case) {
      case "command": {
        if (object.type?.value !== undefined && object.type?.value !== null) {
          message.type = { $case: "command", value: object.type.value };
        }
        break;
      }
      case "prompt": {
        if (object.type?.value !== undefined && object.type?.value !== null) {
          message.type = { $case: "prompt", value: object.type.value };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseWorkspaceConfig(): WorkspaceConfig {
  return { enabled: false, path: "", unique: undefined };
}

export const WorkspaceConfig: MessageFns<WorkspaceConfig> = {
  encode(message: WorkspaceConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enabled !== false) {
      writer.uint32(8).bool(message.enabled);
    }
    if (message.path !== "") {
      writer.uint32(18).string(message.path);
    }
    if (message.unique !== undefined) {
      NameGenConfig.encode(message.unique, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkspaceConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkspaceConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.unique = NameGenConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkspaceConfig {
    return {
      enabled: isSet(object.enabled) ? gt.Boolean(object.enabled) : false,
      path: isSet(object.path) ? gt.String(object.path) : "",
      unique: isSet(object.unique) ? NameGenConfig.fromJSON(object.unique) : undefined,
    };
  },

  toJSON(message: WorkspaceConfig): unknown {
    const obj: any = {};
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.unique !== undefined) {
      obj.unique = NameGenConfig.toJSON(message.unique);
    }
    return obj;
  },

  create(base?: DeepPartial<WorkspaceConfig>): WorkspaceConfig {
    return WorkspaceConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkspaceConfig>): WorkspaceConfig {
    const message = createBaseWorkspaceConfig();
    message.enabled = object.enabled ?? false;
    message.path = object.path ?? "";
    message.unique = (object.unique !== undefined && object.unique !== null)
      ? NameGenConfig.fromPartial(object.unique)
      : undefined;
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
