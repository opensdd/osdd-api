// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               v5.29.3
// source: osdd/recipes/context.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { GitReference, UserInputParameter } from "../common";

export const protobufPackage = "osdd.recipes.context";

export interface Context {
  entries: ContextEntry[];
}

export interface ContextEntry {
  path: string;
  from: ContextFrom | undefined;
}

export interface ContextFrom {
  type?:
    | { $case: "combined"; value: CombinedContextSource }
    | { $case: "github"; value: GitReference }
    | { $case: "cmd"; value: string }
    | { $case: "text"; value: string }
    | { $case: "prefetchId"; value: string }
    | { $case: "userInput"; value: UserInputContextSource }
    | undefined;
}

export interface CombinedContextSource {
  items: CombinedContextSource_Item[];
}

export interface CombinedContextSource_Item {
  type?:
    | { $case: "github"; value: GitReference }
    | { $case: "cmd"; value: string }
    | { $case: "text"; value: string }
    | { $case: "prefetchId"; value: string }
    | { $case: "userInput"; value: UserInputContextSource }
    | undefined;
}

export interface UserInputContextSource {
  entries: UserInputParameter[];
}

function createBaseContext(): Context {
  return { entries: [] };
}

export const Context: MessageFns<Context> = {
  encode(message: Context, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entries) {
      ContextEntry.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Context {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entries.push(ContextEntry.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Context {
    return {
      entries: gt.Array.isArray(object?.entries) ? object.entries.map((e: any) => ContextEntry.fromJSON(e)) : [],
    };
  },

  toJSON(message: Context): unknown {
    const obj: any = {};
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => ContextEntry.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Context>): Context {
    return Context.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Context>): Context {
    const message = createBaseContext();
    message.entries = object.entries?.map((e) => ContextEntry.fromPartial(e)) || [];
    return message;
  },
};

function createBaseContextEntry(): ContextEntry {
  return { path: "", from: undefined };
}

export const ContextEntry: MessageFns<ContextEntry> = {
  encode(message: ContextEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.from !== undefined) {
      ContextFrom.encode(message.from, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContextEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContextEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.from = ContextFrom.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContextEntry {
    return {
      path: isSet(object.path) ? gt.String(object.path) : "",
      from: isSet(object.from) ? ContextFrom.fromJSON(object.from) : undefined,
    };
  },

  toJSON(message: ContextEntry): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.from !== undefined) {
      obj.from = ContextFrom.toJSON(message.from);
    }
    return obj;
  },

  create(base?: DeepPartial<ContextEntry>): ContextEntry {
    return ContextEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ContextEntry>): ContextEntry {
    const message = createBaseContextEntry();
    message.path = object.path ?? "";
    message.from = (object.from !== undefined && object.from !== null)
      ? ContextFrom.fromPartial(object.from)
      : undefined;
    return message;
  },
};

function createBaseContextFrom(): ContextFrom {
  return { type: undefined };
}

export const ContextFrom: MessageFns<ContextFrom> = {
  encode(message: ContextFrom, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.type?.$case) {
      case "combined":
        CombinedContextSource.encode(message.type.value, writer.uint32(802).fork()).join();
        break;
      case "github":
        GitReference.encode(message.type.value, writer.uint32(810).fork()).join();
        break;
      case "cmd":
        writer.uint32(818).string(message.type.value);
        break;
      case "text":
        writer.uint32(826).string(message.type.value);
        break;
      case "prefetchId":
        writer.uint32(834).string(message.type.value);
        break;
      case "userInput":
        UserInputContextSource.encode(message.type.value, writer.uint32(842).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContextFrom {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContextFrom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 100: {
          if (tag !== 802) {
            break;
          }

          message.type = { $case: "combined", value: CombinedContextSource.decode(reader, reader.uint32()) };
          continue;
        }
        case 101: {
          if (tag !== 810) {
            break;
          }

          message.type = { $case: "github", value: GitReference.decode(reader, reader.uint32()) };
          continue;
        }
        case 102: {
          if (tag !== 818) {
            break;
          }

          message.type = { $case: "cmd", value: reader.string() };
          continue;
        }
        case 103: {
          if (tag !== 826) {
            break;
          }

          message.type = { $case: "text", value: reader.string() };
          continue;
        }
        case 104: {
          if (tag !== 834) {
            break;
          }

          message.type = { $case: "prefetchId", value: reader.string() };
          continue;
        }
        case 105: {
          if (tag !== 842) {
            break;
          }

          message.type = { $case: "userInput", value: UserInputContextSource.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContextFrom {
    return {
      type: isSet(object.combined)
        ? { $case: "combined", value: CombinedContextSource.fromJSON(object.combined) }
        : isSet(object.github)
        ? { $case: "github", value: GitReference.fromJSON(object.github) }
        : isSet(object.cmd)
        ? { $case: "cmd", value: gt.String(object.cmd) }
        : isSet(object.text)
        ? { $case: "text", value: gt.String(object.text) }
        : isSet(object.prefetchId)
        ? { $case: "prefetchId", value: gt.String(object.prefetchId) }
        : isSet(object.userInput)
        ? { $case: "userInput", value: UserInputContextSource.fromJSON(object.userInput) }
        : undefined,
    };
  },

  toJSON(message: ContextFrom): unknown {
    const obj: any = {};
    if (message.type?.$case === "combined") {
      obj.combined = CombinedContextSource.toJSON(message.type.value);
    } else if (message.type?.$case === "github") {
      obj.github = GitReference.toJSON(message.type.value);
    } else if (message.type?.$case === "cmd") {
      obj.cmd = message.type.value;
    } else if (message.type?.$case === "text") {
      obj.text = message.type.value;
    } else if (message.type?.$case === "prefetchId") {
      obj.prefetchId = message.type.value;
    } else if (message.type?.$case === "userInput") {
      obj.userInput = UserInputContextSource.toJSON(message.type.value);
    }
    return obj;
  },

  create(base?: DeepPartial<ContextFrom>): ContextFrom {
    return ContextFrom.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ContextFrom>): ContextFrom {
    const message = createBaseContextFrom();
    switch (object.type?.$case) {
      case "combined": {
        if (object.type?.value !== undefined && object.type?.value !== null) {
          message.type = { $case: "combined", value: CombinedContextSource.fromPartial(object.type.value) };
        }
        break;
      }
      case "github": {
        if (object.type?.value !== undefined && object.type?.value !== null) {
          message.type = { $case: "github", value: GitReference.fromPartial(object.type.value) };
        }
        break;
      }
      case "cmd": {
        if (object.type?.value !== undefined && object.type?.value !== null) {
          message.type = { $case: "cmd", value: object.type.value };
        }
        break;
      }
      case "text": {
        if (object.type?.value !== undefined && object.type?.value !== null) {
          message.type = { $case: "text", value: object.type.value };
        }
        break;
      }
      case "prefetchId": {
        if (object.type?.value !== undefined && object.type?.value !== null) {
          message.type = { $case: "prefetchId", value: object.type.value };
        }
        break;
      }
      case "userInput": {
        if (object.type?.value !== undefined && object.type?.value !== null) {
          message.type = { $case: "userInput", value: UserInputContextSource.fromPartial(object.type.value) };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseCombinedContextSource(): CombinedContextSource {
  return { items: [] };
}

export const CombinedContextSource: MessageFns<CombinedContextSource> = {
  encode(message: CombinedContextSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.items) {
      CombinedContextSource_Item.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CombinedContextSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCombinedContextSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.items.push(CombinedContextSource_Item.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CombinedContextSource {
    return {
      items: gt.Array.isArray(object?.items)
        ? object.items.map((e: any) => CombinedContextSource_Item.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CombinedContextSource): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items.map((e) => CombinedContextSource_Item.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CombinedContextSource>): CombinedContextSource {
    return CombinedContextSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CombinedContextSource>): CombinedContextSource {
    const message = createBaseCombinedContextSource();
    message.items = object.items?.map((e) => CombinedContextSource_Item.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCombinedContextSource_Item(): CombinedContextSource_Item {
  return { type: undefined };
}

export const CombinedContextSource_Item: MessageFns<CombinedContextSource_Item> = {
  encode(message: CombinedContextSource_Item, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.type?.$case) {
      case "github":
        GitReference.encode(message.type.value, writer.uint32(802).fork()).join();
        break;
      case "cmd":
        writer.uint32(810).string(message.type.value);
        break;
      case "text":
        writer.uint32(818).string(message.type.value);
        break;
      case "prefetchId":
        writer.uint32(826).string(message.type.value);
        break;
      case "userInput":
        UserInputContextSource.encode(message.type.value, writer.uint32(834).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CombinedContextSource_Item {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCombinedContextSource_Item();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 100: {
          if (tag !== 802) {
            break;
          }

          message.type = { $case: "github", value: GitReference.decode(reader, reader.uint32()) };
          continue;
        }
        case 101: {
          if (tag !== 810) {
            break;
          }

          message.type = { $case: "cmd", value: reader.string() };
          continue;
        }
        case 102: {
          if (tag !== 818) {
            break;
          }

          message.type = { $case: "text", value: reader.string() };
          continue;
        }
        case 103: {
          if (tag !== 826) {
            break;
          }

          message.type = { $case: "prefetchId", value: reader.string() };
          continue;
        }
        case 104: {
          if (tag !== 834) {
            break;
          }

          message.type = { $case: "userInput", value: UserInputContextSource.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CombinedContextSource_Item {
    return {
      type: isSet(object.github)
        ? { $case: "github", value: GitReference.fromJSON(object.github) }
        : isSet(object.cmd)
        ? { $case: "cmd", value: gt.String(object.cmd) }
        : isSet(object.text)
        ? { $case: "text", value: gt.String(object.text) }
        : isSet(object.prefetchId)
        ? { $case: "prefetchId", value: gt.String(object.prefetchId) }
        : isSet(object.userInput)
        ? { $case: "userInput", value: UserInputContextSource.fromJSON(object.userInput) }
        : undefined,
    };
  },

  toJSON(message: CombinedContextSource_Item): unknown {
    const obj: any = {};
    if (message.type?.$case === "github") {
      obj.github = GitReference.toJSON(message.type.value);
    } else if (message.type?.$case === "cmd") {
      obj.cmd = message.type.value;
    } else if (message.type?.$case === "text") {
      obj.text = message.type.value;
    } else if (message.type?.$case === "prefetchId") {
      obj.prefetchId = message.type.value;
    } else if (message.type?.$case === "userInput") {
      obj.userInput = UserInputContextSource.toJSON(message.type.value);
    }
    return obj;
  },

  create(base?: DeepPartial<CombinedContextSource_Item>): CombinedContextSource_Item {
    return CombinedContextSource_Item.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CombinedContextSource_Item>): CombinedContextSource_Item {
    const message = createBaseCombinedContextSource_Item();
    switch (object.type?.$case) {
      case "github": {
        if (object.type?.value !== undefined && object.type?.value !== null) {
          message.type = { $case: "github", value: GitReference.fromPartial(object.type.value) };
        }
        break;
      }
      case "cmd": {
        if (object.type?.value !== undefined && object.type?.value !== null) {
          message.type = { $case: "cmd", value: object.type.value };
        }
        break;
      }
      case "text": {
        if (object.type?.value !== undefined && object.type?.value !== null) {
          message.type = { $case: "text", value: object.type.value };
        }
        break;
      }
      case "prefetchId": {
        if (object.type?.value !== undefined && object.type?.value !== null) {
          message.type = { $case: "prefetchId", value: object.type.value };
        }
        break;
      }
      case "userInput": {
        if (object.type?.value !== undefined && object.type?.value !== null) {
          message.type = { $case: "userInput", value: UserInputContextSource.fromPartial(object.type.value) };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseUserInputContextSource(): UserInputContextSource {
  return { entries: [] };
}

export const UserInputContextSource: MessageFns<UserInputContextSource> = {
  encode(message: UserInputContextSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entries) {
      UserInputParameter.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserInputContextSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserInputContextSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entries.push(UserInputParameter.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserInputContextSource {
    return {
      entries: gt.Array.isArray(object?.entries) ? object.entries.map((e: any) => UserInputParameter.fromJSON(e)) : [],
    };
  },

  toJSON(message: UserInputContextSource): unknown {
    const obj: any = {};
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => UserInputParameter.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UserInputContextSource>): UserInputContextSource {
    return UserInputContextSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserInputContextSource>): UserInputContextSource {
    const message = createBaseUserInputContextSource();
    message.entries = object.entries?.map((e) => UserInputParameter.fromPartial(e)) || [];
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
