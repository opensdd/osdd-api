// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               v5.29.3
// source: osdd/content.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "osdd.content";

export interface Prefetch {
  entries: PrefetchEntry[];
}

export interface PrefetchEntry {
  type?: { $case: "cmd"; value: string } | undefined;
}

export interface PrefetchResult {
  data: FetchedData[];
}

export interface FetchedData {
  id: string;
  data: string;
}

function createBasePrefetch(): Prefetch {
  return { entries: [] };
}

export const Prefetch: MessageFns<Prefetch> = {
  encode(message: Prefetch, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entries) {
      PrefetchEntry.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Prefetch {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrefetch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entries.push(PrefetchEntry.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Prefetch {
    return {
      entries: gt.Array.isArray(object?.entries) ? object.entries.map((e: any) => PrefetchEntry.fromJSON(e)) : [],
    };
  },

  toJSON(message: Prefetch): unknown {
    const obj: any = {};
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => PrefetchEntry.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Prefetch>): Prefetch {
    return Prefetch.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Prefetch>): Prefetch {
    const message = createBasePrefetch();
    message.entries = object.entries?.map((e) => PrefetchEntry.fromPartial(e)) || [];
    return message;
  },
};

function createBasePrefetchEntry(): PrefetchEntry {
  return { type: undefined };
}

export const PrefetchEntry: MessageFns<PrefetchEntry> = {
  encode(message: PrefetchEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.type?.$case) {
      case "cmd":
        writer.uint32(802).string(message.type.value);
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrefetchEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrefetchEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 100: {
          if (tag !== 802) {
            break;
          }

          message.type = { $case: "cmd", value: reader.string() };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrefetchEntry {
    return { type: isSet(object.cmd) ? { $case: "cmd", value: gt.String(object.cmd) } : undefined };
  },

  toJSON(message: PrefetchEntry): unknown {
    const obj: any = {};
    if (message.type?.$case === "cmd") {
      obj.cmd = message.type.value;
    }
    return obj;
  },

  create(base?: DeepPartial<PrefetchEntry>): PrefetchEntry {
    return PrefetchEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PrefetchEntry>): PrefetchEntry {
    const message = createBasePrefetchEntry();
    switch (object.type?.$case) {
      case "cmd": {
        if (object.type?.value !== undefined && object.type?.value !== null) {
          message.type = { $case: "cmd", value: object.type.value };
        }
        break;
      }
    }
    return message;
  },
};

function createBasePrefetchResult(): PrefetchResult {
  return { data: [] };
}

export const PrefetchResult: MessageFns<PrefetchResult> = {
  encode(message: PrefetchResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.data) {
      FetchedData.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrefetchResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrefetchResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data.push(FetchedData.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrefetchResult {
    return { data: gt.Array.isArray(object?.data) ? object.data.map((e: any) => FetchedData.fromJSON(e)) : [] };
  },

  toJSON(message: PrefetchResult): unknown {
    const obj: any = {};
    if (message.data?.length) {
      obj.data = message.data.map((e) => FetchedData.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<PrefetchResult>): PrefetchResult {
    return PrefetchResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PrefetchResult>): PrefetchResult {
    const message = createBasePrefetchResult();
    message.data = object.data?.map((e) => FetchedData.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFetchedData(): FetchedData {
  return { id: "", data: "" };
}

export const FetchedData: MessageFns<FetchedData> = {
  encode(message: FetchedData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== "") {
      writer.uint32(18).string(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchedData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchedData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchedData {
    return { id: isSet(object.id) ? gt.String(object.id) : "", data: isSet(object.data) ? gt.String(object.data) : "" };
  },

  toJSON(message: FetchedData): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchedData>): FetchedData {
    return FetchedData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchedData>): FetchedData {
    const message = createBaseFetchedData();
    message.id = object.id ?? "";
    message.data = object.data ?? "";
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
