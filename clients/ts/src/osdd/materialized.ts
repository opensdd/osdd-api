// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               v5.29.3
// source: osdd/materialized.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "osdd.materialized";

export interface MaterializedResult {
  entries: MaterializedResult_Entry[];
}

export interface MaterializedResult_Entry {
  type?: { $case: "file"; value: FullFileContent } | undefined;
}

export interface FullFileContent {
  path: string;
  content: string;
}

function createBaseMaterializedResult(): MaterializedResult {
  return { entries: [] };
}

export const MaterializedResult: MessageFns<MaterializedResult> = {
  encode(message: MaterializedResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entries) {
      MaterializedResult_Entry.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MaterializedResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMaterializedResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entries.push(MaterializedResult_Entry.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MaterializedResult {
    return {
      entries: gt.Array.isArray(object?.entries)
        ? object.entries.map((e: any) => MaterializedResult_Entry.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MaterializedResult): unknown {
    const obj: any = {};
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => MaterializedResult_Entry.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MaterializedResult>): MaterializedResult {
    return MaterializedResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MaterializedResult>): MaterializedResult {
    const message = createBaseMaterializedResult();
    message.entries = object.entries?.map((e) => MaterializedResult_Entry.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMaterializedResult_Entry(): MaterializedResult_Entry {
  return { type: undefined };
}

export const MaterializedResult_Entry: MessageFns<MaterializedResult_Entry> = {
  encode(message: MaterializedResult_Entry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.type?.$case) {
      case "file":
        FullFileContent.encode(message.type.value, writer.uint32(802).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MaterializedResult_Entry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMaterializedResult_Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 100: {
          if (tag !== 802) {
            break;
          }

          message.type = { $case: "file", value: FullFileContent.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MaterializedResult_Entry {
    return { type: isSet(object.file) ? { $case: "file", value: FullFileContent.fromJSON(object.file) } : undefined };
  },

  toJSON(message: MaterializedResult_Entry): unknown {
    const obj: any = {};
    if (message.type?.$case === "file") {
      obj.file = FullFileContent.toJSON(message.type.value);
    }
    return obj;
  },

  create(base?: DeepPartial<MaterializedResult_Entry>): MaterializedResult_Entry {
    return MaterializedResult_Entry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MaterializedResult_Entry>): MaterializedResult_Entry {
    const message = createBaseMaterializedResult_Entry();
    switch (object.type?.$case) {
      case "file": {
        if (object.type?.value !== undefined && object.type?.value !== null) {
          message.type = { $case: "file", value: FullFileContent.fromPartial(object.type.value) };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseFullFileContent(): FullFileContent {
  return { path: "", content: "" };
}

export const FullFileContent: MessageFns<FullFileContent> = {
  encode(message: FullFileContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FullFileContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFullFileContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FullFileContent {
    return {
      path: isSet(object.path) ? gt.String(object.path) : "",
      content: isSet(object.content) ? gt.String(object.content) : "",
    };
  },

  toJSON(message: FullFileContent): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    return obj;
  },

  create(base?: DeepPartial<FullFileContent>): FullFileContent {
    return FullFileContent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FullFileContent>): FullFileContent {
    const message = createBaseFullFileContent();
    message.path = object.path ?? "";
    message.content = object.content ?? "";
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
